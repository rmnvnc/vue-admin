#!/usr/bin/perl
# USE UTF-8 !!!
package Tomahawk::module;
use open ':utf8', ':std';
use Encode;
use if $] < 5.018, 'encoding','utf8';
use utf8;
use strict;

use Digest;
use Digest::MD5  qw(md5 md5_hex md5_base64);
use Digest::SHA1  qw(sha1 sha1_hex sha1_base64);
use Digest::SHA qw(hmac_sha256_base64);
use MIME::Base64;
use JSON;
use App::301::_init;
use TOM::Logger;

sub execute
{
	my %env=@_;
	my %env_output;
	
	Tomahawk::GetTpl() || return undef;
	
	#my %tpl_hash;
	
	$env{'login'}=$env{'username'} || $main::FORM{'username'} || $main::RPC->{'username'};
	$env{'pass'}=$env{'password'} || $main::FORM{'password'} || $main::RPC->{'password'};
	$env{'code'}=$env{'code'} || $main::FORM{'code'} || $main::RPC->{'code'};

	my $forcelogin; # without password
	my $login_ishash;
	
	$forcelogin=1 if $main::env{'forcelogin'};

	if ($main::USRM{'logged'} eq "Y")
	{
		
		if ($env{'url'})
		{
			$main::location=$env{'url'};
			return 1;
		}
		
	}
	
	
	if ($main::FORM{'token'})
	{
		main::_log("login with token=".$main::FORM{'token'});
		my $sql_status="status='Y'";
			$sql_status="status IN ('Y','W')" if $env{'token_force_status'};
			$env{'force_status'} = 1 if $env{'token_force_status'};
		my $email_not_null = 'email IS NOT NULL AND';
			$email_not_null = '' if $env{'token_no_email'};
		my %sth0=TOM::Database::SQL::execute(qq{
			SELECT
				*
			FROM
				`$App::301::db_name`.a301_user
			WHERE
				secure_hash = ? AND
				hostname=? AND
				$email_not_null
				$sql_status
			ORDER BY
				ref_facebook DESC
			LIMIT 1
		},'bind'=>[$main::FORM{'token'},$tom::H_cookie],'quiet'=>1);
		my %user=$sth0{'sth'}->fetchhash();
		if ($user{'ID_user'})
		{
			$forcelogin=1;
			$login_ishash=1;
			#$env{'ID_user'}=$user{'ID_user'};
			$env{'login'}=$user{'ID_user'};
			$env{'pass'}='force';
		}
	}
	
	if ((!$env{'login'})||(!$env{'pass'})||(not $env{'login'}=~/^[a-zA-Z0-9_\#\@\.\-]{3,128}$/))
	{
		if (exists $main::FORM{'submit'} || $env{'login'} || $env{'pass'})
		{
			main::_log('no credentials!');
			$TPL->{'variables'}{'error'} = 'no credentials';
			if ($env{'http_error'})
			{
				$main::page_statuscode=$env{'http_error'};
			}
		}
		
		return 1;
	}
	
	# cookies are dissabled
	if ((keys %main::COOKIES_save) == 0)
	{
		main::_log('no cookie support!');
		$TPL->{'variables'}{'error'} = 'no cookies';
		return 1;
	}
	
	my $login_successful;
	
	main::_log("ID_user='$main::USRM{ID_user}' ID_session='$main::USRM{ID_session}' IP='$main::ENV{REMOTE_ADDR}' AGENT='$main::ENV{HTTP_USER_AGENT}'");
	
	# continue with current USRM_S session data
	my %USRM_S;if ($main::USRM{'session'}{'USRM_S'}){%USRM_S=%{$main::USRM{'session'}{'USRM_S'}};}
	
	my $sql_status="status='Y'";
		$sql_status="status IN ('Y','W')" if $env{'force_status'};
	
	my $sql_user="TRIM(login)=? OR TRIM(email)=?";
	my @sql_user_bind;
		push @sql_user_bind,$env{'login'};
		push @sql_user_bind,$env{'login'};
	
	if ($login_ishash)
	{
		$sql_user="ID_user=?";
		@sql_user_bind=($env{'login'});
	}
	
	my $sql=qq{
		SELECT
			*
		FROM
			`$App::301::db_name`.a301_user
		WHERE
			($sql_user) AND
			hostname='$tom::H_cookie' AND
			$sql_status
		LIMIT 1
	};
	my %sth0=TOM::Database::SQL::execute($sql,'bind'=>[@sql_user_bind],'quiet'=>1);
	my %user=$sth0{'sth'}->fetchhash();
	if ($user{'ID_user'})
	{
		main::_log("user with login '$env{'login'}' exists");

		# check history of logins
		my %sth1=TOM::Database::SQL::execute(qq{
			SELECT
				*
			FROM
				`$App::301::db_name`.a301_user_history_login
			WHERE
				ID_user = ?
				AND success = 'N'
				AND datetime_login >= DATE_SUB(NOW(),INTERVAL 30 MINUTE)
			LIMIT 5
		},'bind'=>[$user{'ID_user'}],'quiet'=>1);
		if ($sth1{'rows'} >= 5)
		{
			main::_log("failed previous 3 logins", LOG_ERROR);
			$TPL->{'variables'}{'error'} = 'failed previous 3 logins, account locked for 30 minutes';
			$main::page_statuscode=$env{'http_error'} if $env{'http_error'};
			return 1;
		}

		# check how old password is
		my %sth1=TOM::Database::SQL::execute(qq{
			SELECT
				datetime_register,
				DATEDIFF(NOW(),datetime_register) AS days
			FROM `$App::301::db_name`.a301_user_history_pass
			WHERE
				ID_user = ?
			ORDER BY
				datetime_register DESC
			LIMIT 1
		},'bind'=>[
			$user{'ID_user'}
		],'quiet'=>1);
		if (my $history_pass = $sth1{'sth'}->fetchrow_hashref())
		{
			if ($history_pass->{'days'} >= 90)
			{
				main::_log("password has been expired after 90 days", LOG_ERROR);
				$TPL->{'variables'}{'error'} = 'password has been expired after 90 days period';
				$main::page_statuscode=$env{'http_error'} if $env{'http_error'};
				return 1;
			}
			elsif ($history_pass->{'days'} >= (90-14))
			{
				$TPL->{'variables'}{'alert'} = "don't forget to change your password in next ".(90-$history_pass->{'days'})." days";
			}
		}

		my $pass=$user{'pass'};
		if ($pass=~/^MD5:/)
		{
			$env{'pass'}='MD5:'.md5_hex(Encode::encode_utf8($env{'pass'}));
			main::_log("pass='$env{'pass'}'");
		}
		elsif ($pass=~/^SHA1:/)
		{
			$env{'pass'}='SHA1:'.sha1_hex(Encode::encode_utf8($env{'pass'}));
			main::_log("pass='$env{'pass'}'");
		}
		elsif ($pass=~/^WPL:salt:/)
		{
			require Digest::Whirlpool;
			my $whirlpool = Digest->new("Whirlpool");
			$whirlpool->add(Encode::encode_utf8($env{'pass'}.$tom::digest_salt));
			$env{'pass'}='WPL:salt:'.$whirlpool->hexdigest;
			main::_log("pass='$env{'pass'}'");
		}
		
		main::_log("vlozeny pass='$env{'pass'}' a povodny pass='$pass'");
		
		if ($pass eq $env{'pass'} || $forcelogin)
		{
			# 2FA
			if ($App::301::user_login_2fa)
			{
				main::_log("2fa authentification enabled and required");
				if ($user{'secure_hash'})
				{
					main::_log("user.secure_hash available");
					if ($App::301::user_login_2fa eq "google-authenticator")
					{
						main::_log("google-authenticator method is available");
						if ($env{'code'})
						{
							main::_log("input code to verify '".$env{'code'}."'");
							my $response = call job('a301-user.google_authenticator.verify',{
								'secret' => $user{'secure_hash'},
								'code' => $env{'code'}
							});
							if ($response)
							{
								main::_log("code is valid");
								%main::USRM=%user;
								$login_successful=1;
							}
							else
							{
								main::_log("code is not valid", LOG_ERROR);
								$TPL->{'variables'}{'error'} = 'secure code is not valid';
								$main::page_statuscode=$env{'http_error'} if $env{'http_error'};
								TOM::Database::SQL::execute(qq{
									INSERT INTO `$App::301::db_name`.a301_user_history_login
									SET
										ID_user = ?,
										success = 'N',
										IP = ?,
										datetime_login = NOW(),
										note = ?
								},'bind'=>[
									$user{'ID_user'},
									$main::ENV{'REMOTE_ADDR'},
									'2FA - secure code is not valid'
								]);
								return 1;
							}
						}
						else
						{
							main::_log("code to verify missing", LOG_ERROR);
							$TPL->{'variables'}{'error'} = 'missing secure code to verify';
							$main::page_statuscode=$env{'http_error'} if $env{'http_error'};
							return 1;
						}
					}
					else
					{
						main::_log("unknown method to 2FA '".$App::301::user_login_2fa."'", LOG_ERROR);
					}
				}
				else
				{
					main::_log("user.secure_hash not available", LOG_ERROR);
					$TPL->{'variables'}{'error'} = 'user without secure token';
					$main::page_statuscode=$env{'http_error'} if $env{'http_error'};
					TOM::Database::SQL::execute(qq{
						INSERT INTO `$App::301::db_name`.a301_user_history_login
						SET
							ID_user = ?,
							success = 'N',
							IP = ?,
							datetime_login = NOW(),
							note = ?
					},'bind'=>[
						$user{'ID_user'},
						$main::ENV{'REMOTE_ADDR'},
						'2FA - user without token'
					]);
					return 1;
				}
			}
			else
			{
				%main::USRM=%user;
				$login_successful=1;
			}
		}
		else
		{
			TOM::Database::SQL::execute(qq{
				INSERT INTO `$App::301::db_name`.a301_user_history_login
				SET
					ID_user = ?,
					success = 'N',
					IP = ?,
					datetime_login = NOW(),
					note = ?
			},'bind'=>[
				$user{'ID_user'},
				$main::ENV{'REMOTE_ADDR'},
				'pass not equals'
			]);

			%main::USRM=%user;
#			$var=1;

#			if (not ($pass2=~/^WPL:salt:/))
#			{
#				App::301::functions::user_add(
#					'user.ID_user' => $user{'user.ID_user'},
#					'user.pass' => $main::FORM{'pass'},
#				);
#			}
		}



	}
	else
	{
		main::_log("user with login '$env{'login'}' does not exist");
		if ($env{'http_error'})
		{
			$main::page_statuscode=$env{'http_error'};
		}
		$TPL->{'variables'}{'error'} = 'no user';
		return 1;
	}
	
	
	
	if ($login_successful)
	{
		main::_log("login and password equals");
		
		if ($TOM::CACHE_memcached)
		{
			# check for actual data in memcached
			# if yes, use it
			
			# delete this data, use only database
			$Ext::CacheMemcache::cache->delete(
				'namespace' => "a301_online",
				'key' => $tom::H_cookie.':'.$main::USRM{'ID_user'},
			);
		}
		
		my %sth0=TOM::Database::SQL::execute(qq{
			SELECT
				*
			FROM
				`$App::301::db_name`.a301_user_online_view
			WHERE
				ID_user='$main::USRM{'ID_user'}'
			LIMIT 1
		});
		if (my %user=$sth0{'sth'}->fetchhash())
		{
			main::_log("I'm already online");
			
			# archive old session
			App::301::session::archive($user{'ID_user'},'reset'=>1);
			
			if ($user{'logged'} eq "Y")
			{
				main::_log("I'm online, and logged in, also reset session");
				main::_log("I'm already logged (ID_user='$main::USRM{'ID_user'}')",undef,2);
				
				$main::USRM{'logged'}="Y";
				# just empty
				foreach (keys %main::COOKIES){next if $_ eq "key";$main::COOKIES{$_}=""};
				
				main::_log("login and pass equals, logging again",undef,2);
				
				# enter into authorized session
				$main::USRM{'ID_session'}=$main::COOKIES{'_ID_session'}=$user{'ID_session'}=TOM::Utils::vars::genhash(32);
				
				$main::COOKIES{'_ID_user'}=$main::USRM{'ID_user'};
				$main::USRM{'cookies'}=$user{'saved_cookies'};
				$main::USRM{'session'}=$user{'saved_session'}; # use session variables from authorized session
				
				TOM::Database::SQL::execute(qq{
					UPDATE
						`$App::301::db_name`.a301_user_online
					SET
						ID_session=?,
						domain=?,
						logged='Y',
						datetime_request=FROM_UNIXTIME($main::time_current),
						IP=?,
						user_agent=?,
						status='Y'
					WHERE
						ID_user=?
					LIMIT 1
				},'quiet'=>1,'bind'=>[
					$main::USRM{'ID_session'},
					$tom::H,
					$main::ENV{'REMOTE_ADDR'},
					$main::ENV{'HTTP_USER_AGENT'},
					$main::COOKIES{'_ID_user'}
				]);
				
				#$XSGN{'TMP'}=$XSGN{'logged-on'};
				#$tpl_hash{'logged-on'} = 'Y';

				$main::USRM_flag="L";
			}
			else
			{
				main::_log("I'm online, but not logged in");
				
				TOM::Database::SQL::execute(qq{
					UPDATE
						`$App::301::db_name`.a301_user_online
					SET
						status='N'
					WHERE
						ID_user='$main::COOKIES{'_ID_user'}'
					LIMIT 1
				},'quiet'=>1);
				$main::USRM{'logged'}="Y";
				foreach (keys %main::COOKIES){$main::COOKIES{$_}=""};
				$main::USRM{'ID_session'}=$main::COOKIES{'_ID_session'}=TOM::Utils::vars::genhash(32);
				$main::COOKIES{'_ID_user'}=$main::USRM{'ID_user'};
				
				$main::USRM{'cookies'}=$main::USRM{'saved_cookies'};
				$main::USRM{'session'}=$main::USRM{'saved_session'};
				
#				my %hash;foreach (sort keys %main::COOKIES){$_=~/^_/ && do {$hash{$_}=$main::COOKIES{$_};next}};
#				$main::USRM{'cookies'}=CVML::structure::serialize(%hash);
				
				TOM::Database::SQL::execute(qq{
					UPDATE
						`$App::301::db_name`.a301_user_online
					SET
						ID_session=?,
						domain=?,
						logged='Y',
						datetime_login=FROM_UNIXTIME($main::time_current),
						datetime_request=FROM_UNIXTIME($main::time_current),
						IP=?,
						user_agent=?,
						cookies=?,
						session=?,
						status='Y'
					WHERE
						ID_user='$main::COOKIES{'_ID_user'}'
					LIMIT 1
				},'quiet'=>1,'bind'=>[
					$main::USRM{'ID_session'},
					$tom::H,
					$main::ENV{'REMOTE_ADDR'},
					$main::ENV{'HTTP_USER_AGENT'},
					$main::USRM{'saved_cookies'},
					$main::USRM{'saved_session'}
				]);
				
			}
			
		}
		else # niesom este online (malo pravdepodobny pripad :)))
		# prisiel som k cudziemu pocitacu a logujem sa tam
		{
			main::_log("I'm not online");
			TOM::Database::SQL::execute(qq{
				UPDATE
					`$App::301::db_name`.a301_user_online
				SET
					status='N'
				WHERE
					ID_user='$main::USRM{'ID_user'}'
				LIMIT 1
			},'quiet'=>1);
			$main::USRM{'logged'}="Y";
			foreach (keys %main::COOKIES){$main::COOKIES{$_}=""};
			my $cvml=new CVML(data=>$main::USRM{'cookies'});
			%main::COOKIES=%{$cvml->{'hash'}};
			$main::COOKIES{'_ID_session'}=$main::USRM{'ID_session'}=TOM::Utils::vars::genhash(32);
			$main::COOKIES{'_ID_user'}=$main::USRM{'ID_user'};
			
			$main::USRM{'cookies'}=$main::USRM{'saved_cookies'};
			$main::USRM{'session'}=$main::USRM{'saved_session'};
			
			# fix unicode in session
			utf8::decode($main::USRM{'session'}) unless utf8::is_utf8($main::USRM{'session'});
			
=head1
			# get session datas from online table in CVML
			# save it into cvml object
			my $cvml=new CVML('data'=>$main::USRM{'session'});
			# save backup copy of session, to compare it at end of request
			$main::USRM{'session_save'}=$main::USRM{'session'};
			# remove all session data
			undef $main::USRM{'session'};
			# control CVML session datas as object
			$App::301::session::serialize=0; # don't serialize into database now!
			# fill session hash with datas from CVML
			tie %{$main::USRM{'session'}}, 'App::301::session'; # create empty tie hash
			%{$main::USRM{'session'}}=%{$cvml->{'hash'}}; # fill tie hash
=cut
			
			main::_log("insert user into online table");
			main::_log("session=".$main::USRM{'saved_session'});
			
			TOM::Database::SQL::execute(qq{
				INSERT INTO `$App::301::db_name`.a301_user_online
				(
					ID_user,
					ID_session,
					domain,
					logged,
					datetime_login,
					datetime_request,
					requests,
					IP,
					user_agent,
					cookies,
					session
				)
				VALUES
				(
					'$main::COOKIES{_ID_user}',
					'$main::COOKIES{_ID_session}',
					'$tom::H',
					'$main::USRM{logged}',
					FROM_UNIXTIME($main::time_current),
					FROM_UNIXTIME($main::time_current),
					'1',
					'$main::ENV{'REMOTE_ADDR'}',
					'$main::ENV{'HTTP_USER_AGENT'}',
					?,
					?
				)
			},'bind'=>[
				$main::USRM{'saved_cookies'},
				$main::USRM{'saved_session'}
			],'quiet'=>1);
			
		}
		
		#$XSGN{'TMP'}=$XSGN{'logged-on'};
		#$tpl_hash{'logged-on'} = 'Y';
		
		$main::USRM_flag="L";
		TOM::Database::SQL::execute(qq{
			UPDATE
				`$App::301::db_name`.a301_user
			SET
				datetime_last_login = FROM_UNIXTIME($main::time_current),
				autolog = 'N'
			WHERE
				ID_user='$main::USRM{'ID_user'}'
			LIMIT 1
		},'quiet'=>1);

		TOM::Database::SQL::execute(qq{
			INSERT INTO `$App::301::db_name`.a301_user_history_login
			SET
				ID_user = ?,
				success = 'Y',
				IP = ?,
				datetime_login = NOW()
		},'bind'=>[$main::USRM{'ID_user'},$main::ENV{'REMOTE_ADDR'}]);
		
	}
	else
	{
		main::_log("incorrect login/password combination");
		if ($env{'http_error'})
		{
			$main::page_statuscode=$env{'http_error'};
		}
		$TPL->{'variables'}{'error'} = 'the username or password is incorrect';
	}
	
	#foreach my $key(keys %main::USRM)
	#{
		#$XSGN{'TMP'}=~s|<%$key%>|$main::USRM{$key}|g;
		#$tpl_hash{'key'} = $main::USRM{$key};
	#}
	
	main::_log("Logged on='".$main::USRM{'logged'}."'");
	
	if ($main::USRM{'logged'} eq "Y" && $env{'url'})
	{
		$main::location=$env{'url'};
		if ($env{'url_session'})
		{
			if ($main::location=~/\/$/)
			{
				$main::location.='?ID_session='.$main::USRM{'ID_session'}.'&ID_user='.$main::USRM{'ID_user'};
			}
			else
			{
				$main::location.='&ID_session='.$main::USRM{'ID_session'}.'&ID_user='.$main::USRM{'ID_user'};
			}
		}
		$main::action="stop";
	}
	
	return 1, %env_output;
}


1;