#!/usr/bin/perl
# USE UTF-8 !!!
package Tomahawk::module;
use open ':utf8', ':std';
use if $] < 5.018, 'encoding','utf8';
use utf8;
use strict;

use App::020::_init;
use App::210::_init;
use JSON;

sub execute
{
	my %env=@_;
	my %env_out;
	
	$env{'depth'}=3 unless $env{'depth'};
	$env{'db_name'}=$App::210::db_name unless $env{'db_name'};
	$env{'db_order'}="ID_charindex" unless $env{'db_order'};
	
	Tomahawk::GetTpl('env'=>\%env) || return undef;
	
	delete $env{'ID_charindex'};
	
	my $from;
	my @sql_bind;
	my $sql_join;
	my $sql_column;
	my $sql_where;
	
	# let's go :)
# 	main::_log('LBA ID ' . $env{'ID'}, 1);
	if ($env{'ID'})
	{
		main::_log("search a210_page.ID=".$env{'ID'}." in ".$env{'db_name'});
		my %data=App::020::SQL::functions::get_ID(
			'db_h'    => 'main',
			'db_name' => $env{'db_name'},
			'tb_name' => 'a210_page',
			'ID'      => $env{'ID'},
			'columns' => 
			{
				'ID_charindex' => 1
			}
		);
		if ($data{'ID'})
		{
			$env{'ID_charindex'}=$data{'ID_charindex'}.':';
		}
		else
		{
			main::_log("can't find ID='$data{'ID'}'",1);
			return undef;
		}
		
	}
	elsif ($env{'ID_entity'})
	{
		my %sth0=TOM::Database::SQL::execute(qq{
			SELECT
				*
			FROM
				`$env{'db_name'}`.`a210_page`
			WHERE
				lng = ?
				AND ID_entity = ?
			LIMIT 1
		},
			'bind'=>[$env{'lng'},$env{'ID_entity'}],
			'mode'=>['container','ro','notsensitive'],
			'quiet'=>1,
			'-cache' => 86400*7,
			'-cache_changetime' => App::020::SQL::functions::_get_changetime(
				{
					'db_h'=>"main",
					'db_name' => $env{'db_name'},
					'tb_name' => "a210_page"
				}
			)
		);
		my %data=$sth0{'sth'}->fetchhash();
		main::_log("found page $data{'ID'}",3,"debug");
		if ($data{'ID'})
		{
			$env{'ID_charindex'}=$data{'ID_charindex'}.':';
		}
		else
		{
			main::_log("can't find ID_entity='".$env{'ID_entity'}."'",1);
			return undef;
		}
	}
	
	$env{'page.status'}='YL' unless $env{'page.status'};
		my $sql_page_status=join "','", split('',$env{'page.status'});
	$env{'page.visible'}='Y' unless $env{'page.visible'};
		my $sql_page_visible=join "','", split('',$env{'page.visible'});
	
	my $sql_suffix='%';
	my $sql_suffix_;
	my $sql_length=50;
	if ($env{'depth'})
	{
		$sql_suffix_=$env{'ID_charindex'}.('___:' x $env{'depth'});
		$sql_length=length($sql_suffix_);
	}
#	main::_log("length = '$sql_length' $sql_suffix_",3,"debug");
	
	if ($env{'page.visible'})
	{
		
	}
	elsif (exists $env{'page.visible'})
	{
		
	}
	else
	{
		$sql_where.=" AND `a210_page`.visible IN ('Y')";
	}
	
	my %sth0=TOM::Database::SQL::execute(qq{
		SELECT
			*
		FROM
			`$env{'db_name'}`.`a210_page`
		WHERE
			lng = ?
			AND ID_charindex LIKE ?
			AND status IN ('$sql_page_status')
			AND visible IN ('$sql_page_visible')
			AND length(ID_charindex) < ?
			$sql_where
		ORDER BY
			$env{'db_order'}
	},
		'bind'=>[$env{'lng'},$env{'ID_charindex'}.$sql_suffix,$sql_length,@sql_bind],
		'mode'=>['container','ro','notsensitive'],
		'quiet'=>1,
		'-cache' => 86400*7,
		'-cache_changetime' => App::020::SQL::functions::_get_changetime(
			{
				'db_h'=>"main",
				'db_name' => $env{'db_name'},
				'tb_name' => "a210_page"
			}
		)
	);
	my @nodes;
	while (my %db0_line=$sth0{'sth'}->fetchhash())
	{
#		push 
		
		if ($db0_line{'metadata'})
		{
			%{$db0_line{'metahash'}}=App::020::functions::metadata::parse($db0_line{'metadata'});
		}
		delete $db0_line{'metadata'};
		
		if ($db0_line{'t_keys'})
		{
			my $cvml=new CVML('data'=>$db0_line{'t_keys'});
			$db0_line{'keys'}=$cvml->{'hash'};
		}
		delete $db0_line{'t_keys'};
		
		foreach my $node (App::020::SQL::functions::tree::get_path(
			$db0_line{'ID'},
			'db_h'    => 'main',
			'db_name' => $env{'db_name'},
			'tb_name' => 'a210_page',
			'-cache' => 86400*7
		))
		{
			$db0_line{'path_url'}.='/'.$node->{'name_url'};
		}
		$db0_line{'path_url'}=~s|^/||;
		
		$db0_line{'ID_charindex'}=~s|^$env{'ID_charindex'}||;
		
#		main::_log("ID_charindex=$env{'ID_charindex'}/$db0_line{'ID_charindex'}",3,"debug");
		
		push @nodes,\%db0_line;
	}
	
	use Data::Dumper;
	my @items;
	my @items;
    foreach my $node (@nodes) {
        next unless $node->{'ID_charindex'} =~ /^...$/;

        # 🛠️ Čistenie: nahradiť undef hodnoty prázdnym stringom
        foreach my $k (keys %$node) {
            $node->{$k} = '' unless defined $node->{$k};
        }

        push @{$node->{'items'}}, subnodes(\@nodes, 'prefix' => $node->{'ID_charindex'});
        push @items, $node;
    }
    $TPL->variables_push({ items => \@items });

	
	# this cache is unique for this used entities (all in a210 :-)
	push @{$env_out{'entity'}},{
		'db_h' => 'main',
		'db_name' => $env{'db_name'},
		'tb_name' => 'a210_page'
	};
	
	return 1,%env_out;
}

sub subnodes
{
	my $allnodes=shift;
	my %env=@_;
	my @mynodes;
	foreach my $node (@{$allnodes})
	{
		next unless $node->{'ID_charindex'}=~/^$env{'prefix'}:...$/;
		push @{$node->{'items'}},subnodes($allnodes,'prefix'=>$node->{'ID_charindex'});
		push @mynodes,$node;
	}
	return @mynodes;
}

1;